

#include <iostream>
#include <WS2tcpip.h>
#include <string>

#pragma comment (lib, "ws2_32.lib")

using namespace std;
class Winsock {
public:

	void Initialze_winsock() {
		int wsOk = WSAStartup(ver, &wsData);

		if (wsOk != 0)
		{
			cerr << "Can't Initialize winsock! Quitting" << endl;
			return;
		}

	}

	void cleanup_winsock() {
		WSACleanup();

	}

	~Winsock()
	{
		// destructor body 
	}

private:
	WSADATA wsData {};
	WORD ver = MAKEWORD(2, 2);

};


class Sockett :public Winsock {
public:
	void  close_listening_socket() {
		closesocket(listening);

	}
	void Create_a_socket() {
	   
		listening = socket(AF_INET, SOCK_STREAM, 0);
		

		if (listening == INVALID_SOCKET)
		{
			cerr << "Can't create a socket! Quitting" << endl;
			return;
		}
	}
	void bind_ip_and_listening() {
		sockaddr_in hint;
		hint.sin_family = AF_INET;
		hint.sin_port = htons(54000);
		hint.sin_addr.S_un.S_addr = INADDR_ANY; // Could also use inet_pton .... 

		bind(listening, (sockaddr*)&hint, sizeof(hint));
		listen(listening, SOMAXCONN);

	}
	void  wait() {
		
		

	   clientSocket = accept(listening, (sockaddr*)&client, &clientSize);

		char host[NI_MAXHOST];		// Client's remote name
		char service[NI_MAXSERV];	// Service (i.e. port) the client is connect on

		ZeroMemory(host, NI_MAXHOST); // same as memset(host, 0, NI_MAXHOST);
		ZeroMemory(service, NI_MAXSERV);

		if (getnameinfo((sockaddr*)&client, sizeof(client), host, NI_MAXHOST, service, NI_MAXSERV, 0) == 0)
		{
			cout << host << " connected on port " << service << endl;
		}
		else
		{
			inet_ntop(AF_INET, &client.sin_addr, host, NI_MAXHOST);
			cout << host << " connected on port " <<
				ntohs(client.sin_port) << endl;
		}



	}
	void close_soc() {
		closesocket(clientSocket);

	}
	~Sockett()
	{
		// destructor body 
	}
	friend class Message;
private:
	
	SOCKET listening = socket(AF_INET, SOCK_STREAM, 0);
	sockaddr_in client{};
	int clientSize = sizeof(client);
	SOCKET clientSocket{};


};


class Message : public Sockett {
public:
	void loop() {
		while (true)
		{
			ZeroMemory(buf, 4096);

			// Wait for client to send data
			int bytesReceived = recv(clientSocket, buf, 4096, 0);
			if (bytesReceived == SOCKET_ERROR)
			{
				cerr << "Error in recv(). Quitting" << endl;
				break;
			}

			if (bytesReceived == 0)
			{
				cout << "Client disconnected " << endl;
				break;
			}

			cout << string(buf, 0, bytesReceived) << endl;

			// Echo message back to client
			send(clientSocket, buf, bytesReceived + 1, 0);

		}
	}
	~Message()
	{
		
	}

private:
	char buf[4096]{};
	
};

int main()
{
	Winsock u1;
	Sockett u2;
	Message u3;


	u1.Initialze_winsock();
	u2.Create_a_socket();
	u2.bind_ip_and_listening();
	u2.wait();
	u2.close_listening_socket();
	u3.loop();
	u2.close_soc();
	u1.cleanup_winsock();

	system("pause");
	



}
